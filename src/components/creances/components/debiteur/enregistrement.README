Réponses concernant AcDomiciliation et la configuration backend
1. Structure API
L'URL exacte pour la sauvegarde d'une domiciliation est :
POST /api/v1/debiteurs/{debCode}/domiciliations

Champs obligatoires d'après le modèle JPA :

domCode (String, max 25 caractères) - Identifiant unique de la domiciliation
bqagCode (String) - Code de l'agence bancaire (marqué comme non nullable)
typdomCode (String) - Code du type de domiciliation (marqué comme non nullable)
2. Format de requête
Exemple d'une requête Postman fonctionnelle :
POST http://localhost:8281/api/v1/debiteurs/12345/domiciliations
Content-Type: application/json

{
  "domCode": "DOM123456",
  "bqagCode": "AG001",
  "typdomCode": "TD001",
  "domLib": "Domiciliation principale"
}

3. Logs backend
Le backend produirait des logs similaires à ceux-ci en cas d'erreur :

Si un champ requis est manquant :MethodArgumentNotValidException: La validation a échoué pour l'argument [0] dans la méthode...
- Champ 'bqagCode': ne doit pas être null

Si une relation est invalide :
EntityNotFoundException: Impossible de trouver AcBanqueAgence avec code: AG999

4. Vérification du debCode
Le backend vérifie l'existence du debCode comme suit :
@Transactional
public DomiciliationCompletVM creer(Long debCode, DomiciliationCreationDTO dto) {
    // Récupère le débiteur - lance une exception s'il n'existe pas
    AcDebiteur debiteur = debiteurRepository.findById(debCode)
        .orElseThrow(() -> new EntityNotFoundException("Débiteur non trouvé avec code: " + debCode));
    
    // Continue le process si le débiteur existe
    // ...
}

5. Format du DTO
Le debCode est attendu dans l'URL uniquement, pas dans le corps de la requête.

Le DTO attendu est structuré comme suit :
public class DomiciliationCreationDTO {
    @NotBlank
    private String domCode;
    
    @NotBlank
    private String bqagCode;
    
    @NotBlank
    private String typdomCode;
    
    private String domLib;
    // autres champs optionnels...
}


6. Transtypes
debCode est traité comme un Long côté backend (numérique)
domCode est traité comme un String
Les dates (domDateCtl) doivent être au format ISO (YYYY-MM-DD)
7. Contraintes d'unicité
domCode est la clé primaire et doit être unique dans la table AC_DOMICILIATION
Aucune contrainte composite n'est définie entre debCode et domCode
8. Validation des données
Le backend effectue ces validations :
Vérification des annotations @NotBlank pour les champs obligatoires
Vérification que les entités référencées existent (banqueAgence, typeDomicil)
Vérification que le domCode n'existe pas déjà (c'est une clé primaire)
Vérification des longueurs maximales (domCode: 25 caractères, domLib: 30 caractères, ancAg: 5 caractères)
9. Réponse HTTP en cas d'échec
400 Bad Request : Si les validations échouent:

{
  "timestamp": "2023-07-15T10:15:30Z",
  "status": 400,
  "error": "Bad Request",
  "message": "Le champ bqagCode ne peut pas être vide",
  "path": "/api/v1/debiteurs/12345/domiciliations"
}

404 Not Found : Si le débiteur n'existe pas:
{
  "timestamp": "2023-07-15T10:15:30Z",
  "status": 404,
  "error": "Not Found",
  "message": "Débiteur non trouvé avec code: 12345",
  "path": "/api/v1/debiteurs/12345/domiciliations"
}

409 Conflict : Si le domCode existe déjà:
{
  "timestamp": "2023-07-15T10:15:30Z",
  "status": 409,
  "error": "Conflict",
  "message": "Une domiciliation avec le code DOM123456 existe déjà",
  "path": "/api/v1/debiteurs/12345/domiciliations"
}

10. Journalisation
Pour activer une journalisation détaillée, ajoutez ceci au fichier application.properties :# Journalisation détaillée pour les requêtes JPA
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Journalisation pour le package spécifique
logging.level.com.exias.migration_acc_web_api.Debiteur=DEBUG

# Format des logs avec timestamps
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%nCes informations devraient vous aider à identifier pourquoi l'enregistrement de la domiciliation ne fonctionne pas correctement dans votre application frontend.
1. API Débiteur Physique
Contrôleur : DebiteurPhysiqueController
Base URL : /api/v1/ac-debiteur-physique

Endpoints
Lister les débiteurs physiques
Méthode : GET
Description : Retourne la liste complète des débiteurs physiques.
URL : /api/v1/ac-debiteur-physique
Réponse : Une liste d’objets de type DebiteurPhysiqueVM
Champ de réponse (exemple extrait de DebiteurPhysiqueVM) :

debCode -meme code que Debiteur
quartCode (String)
quartLib (String)
profesCode (String)
profesLib (String)
natCode (String)
natLib (String)
empCode (String)
empLib (String)
statsalCode (String)
statsalLib (String)
fonctCode (String)
fonctLib (String)
civCode (String)
civLib (String)
debNom (String)
debPren (String)
debDatnaiss (Date)
debLieunaiss (String)
debDatdec (Date)
debTeldom (String)
Récupérer un débiteur physique par identifiant
Méthode : GET
Description : Récupère le détail d’un débiteur physique en fonction de son identifiant.
URL : /api/v1/ac-debiteur-physique/{id}
Paramètre :

id (Long) – Identifiant du débiteur
Réponse : Objet DebiteurPhysiqueVM
Créer un débiteur physique
Méthode : POST
Description : Crée un nouveau débiteur physique.
URL : /api/v1/ac-debiteur-physique
Contenu de la requête (DTO) :

Exemple de champ dans DebiteurPhysiqueCreationDTO :
• debLieunaiss, debDatdec, debTeldom, etc.
Réponse : Objet créé sous forme de DebiteurPhysiqueVM
Notes : Une création réussie journalise un message "Début création débiteur physique" puis "Fin création débiteur physique id={id}".
Modifier un débiteur physique
Méthode : PUT
Description : Met à jour les informations d’un débiteur physique existant selon l’identifiant.
URL : /api/v1/ac-debiteur-physique/{id}
Paramètre :

id (Long)
Contenu de la requête (DTO) :
Exemple de champ dans DebiteurPhysiqueModificationDTO (similaire aux créations avec des champs à mettre à jour)
Réponse : Objet DebiteurPhysiqueVM mis à jour
Supprimer un débiteur physique
Méthode : DELETE
Description : Supprime le débiteur physique identifié par son identifiant.
URL : /api/v1/ac-debiteur-physique/{id}
Paramètre :

id (Long)
Réponse : Code HTTP 204 No Content en cas de succès
Logs : La suppression est journalisée avec "Début suppression débiteur physique id={id}" et "Fin suppression débiteur physique id={id}".
2. API Débiteur Moral
Contrôleur : DebiteurMoralController
Base URL : /api/v1/ac-debiteur-moral

Endpoints
Lister les débiteurs moraux
Méthode : GET
Description : Récupère la liste des débiteurs moraux.
URL : /api/v1/ac-debiteur-moral
Réponse : Liste d’objets DebiteurMoralVM.
Champs typiques (extrait de DebiteurMoralVM) :

id, nom, sigle, etc. (selon implémentation)
Récupérer un débiteur moral
Méthode : GET
Description : Retourne le détail d’un débiteur moral en fonction de son identifiant.
URL : /api/v1/ac-debiteur-moral/{id}
Paramètre :

id (Long)
Réponse : Objet DebiteurMoralVM
Créer un débiteur moral
Méthode : POST
Description : Crée un nouveau débiteur moral.
URL : /api/v1/ac-debiteur-moral
Contenu de la requête (DTO) :

Exemple de champ dans DebiteurMoralCreationDTO
Réponse : Objet créé sous forme de DebiteurMoralVM
Modifier un débiteur moral
Méthode : PUT
Description : Met à jour les informations d’un débiteur moral existant.
URL : /api/v1/ac-debiteur-moral/{id}
Paramètre :

id (Long)
Contenu de la requête (DTO) :
Exemple de champ dans DebiteurMoralModificationDTO
Réponse : Objet DebiteurMoralVM modifié
Supprimer un débiteur moral
Méthode : DELETE
Description : Supprime le débiteur moral identifié par son identifiant.
URL : /api/v1/ac-debiteur-moral/{id}
Réponse : Code HTTP 204 No Content

3. API Débiteur (Général)
Contrôleur : DebiteurController
Base URL : /api/v1/debiteurs

Endpoints
Ce contrôleur gère l’entité débiteur de façon globale (possiblement pour des débiteurs comportant à la fois des informations physiques et d’autres aspects) :

Lister les débiteurs
Méthode : GET
Description : Retourne une liste de tous les débiteurs.
Réponse : Liste d’objets DebiteurVM
Champs de réponse typiques (extrait de DebiteurVM) :

id, categDebCode, propCode, garphysCode, typdebCode, debAdrpost, debCel, debEmail, debTelbur, debFax, debDateCtl, debCodeCharg, debTeldom, debLocalisat
Récupérer un débiteur par identifiant
Méthode : GET
Description : Récupère le détail d’un débiteur spécifique.
URL : /api/v1/debiteurs/{id}
Réponse : Objet DebiteurVM

Créer un débiteur
Méthode : POST
Description : Crée un nouveau débiteur.
Contenu de la requête (DTO) :

Exemple de champ dans DebiteurCreationDTO
Réponse : Objet DebiteurVM créé
Modifier un débiteur
Méthode : PUT
Description : Met à jour les données d’un débiteur existant.
URL : /api/v1/debiteurs/{id}
Contenu de la requête (DTO) :

Exemple de champ dans DebiteurModificationDTO
Réponse : Objet DebiteurVM modifié
Supprimer un débiteur
Méthode : DELETE
Description : Supprime un débiteur en fonction de son identifiant.
URL : /api/v1/debiteurs/{id}
Réponse : HTTP 204 No Content

4. Autres APIs associées
Banque Agence
Contrôleur : OracleBanqueAgenceAdapteur (via BanqueAgenceCasUtilisation)
URL de base : (exemple) /api/v1/banque-agences
Opération principale : Lister les agences bancaires
Réponse : Liste d’objets BanqueAgenceVM
Domiciliation
Contrôleur : GarantiePhyController ou OracleDomiciliationAdapteur (en fonction de l’implémentation)
URL de base : /api/v1/domiciliations
Opérations : Lister, récupérer, créer, modifier, supprimer
Remarque : Quelques méthodes journalisent les appels et les erreurs.


Documentation API – Modules Complémentaires
1. Nationalité
Contrôleur associé : (ex. NationaliteController)
Base URL : /api/v1/nationalites

Endpoints principaux :

Lister les nationalités
Méthode : GET
URL : /api/v1/nationalites
Réponse : Liste d’objets NationaliteVM comprenant :

natCode (String)
natLib (String)
natDef (String)
Récupérer une nationalité
Méthode : GET
URL : /api/v1/nationalites/{code}
Paramètre :

code (String) : Code identifiant la nationalité
Réponse : Objet NationaliteVM
2. Ville
Port : VillePort (interface définissant les méthodes)
Contrôleur associé : (ex. VilleController)
Base URL : /api/v1/villes

Endpoints principaux :

Lister les villes
Méthode : GET
URL : /api/v1/villes
Réponse : Liste d’objets VilleVM comprenant des informations comme code, libellé, etc.

Récupérer une ville
Méthode : GET
URL : /api/v1/villes/{code}
Paramètre :

code (String) : Code identifiant la ville
Réponse : Objet VilleVM
3. Quartier
Contrôleur associé : (ex. QuartierController)
Base URL : /api/v1/quartiers

Endpoints principaux :

Lister les quartiers
Méthode : GET
URL : /api/v1/quartiers
Réponse : Liste d’objets QuartierVM (champs typiques : quartCode, quartLib, etc.)

Récupérer un quartier
Méthode : GET
URL : /api/v1/quartiers/{code}
Paramètre :

code (String)
Réponse : Objet QuartierVM
4. Statut Salarié
Port : StatutSalariePort
Contrôleur associé : (ex. StatutSalarieController)
Base URL : /api/v1/statut-salaries

Endpoints principaux :

Lister les statuts de salarié
Méthode : GET
URL : /api/v1/statut-salaries
Réponse : Liste d’objets StatutSalarieVM (champs typiques à consulter dans l’implémentation)
Informations Complémentaires
Logs et gestion des erreurs :
Chaque contrôleur journalise les actions (début et fin d’opération) afin de faciliter le suivi. En cas d’erreur, une réponse avec le code HTTP approprié (ex. 404 pour non trouvé, 500 pour une erreur serveur) est renvoyée avec un message explicatif.

Transformation des données :
Les entités (JPA) sont transformées en View Models (VM) via des adapteurs ou des cas d’utilisation, permettant de fournir des données adaptées aux besoins du frontend.

Types de réponse :
Les endpoints renvoient des objets VM ou listes d’objets VM, en fonction de l’opération (récupération ou liste). Les DTO (Data Transfer Objects) sont utilisés lors des créations ou mises à jour.
